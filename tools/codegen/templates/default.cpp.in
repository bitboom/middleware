/**
 *  Copyright (c) 2014-present, Facebook, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed in accordance with the terms specified in
 *  the LICENSE file found in the root directory of this source tree.
 */
/*
 *  Copyright (c) 2019 Samsung Electronics Co., Ltd All Rights Reserved
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License
 */

/*
** This file is generated. Do not modify it manually!
*/

#include <osquery/tables.h>
#include <osquery/registry_factory.h>

namespace osquery {

/// BEGIN[GENTABLE]
namespace tables {
{% if class_name == "" %}\
{% if generator %}\
void {{function}}(RowYield& yield, QueryContext& context);
{% elif strongly_typed_rows %}\
osquery::TableRows {{function}}(QueryContext& context);
{% else %}\
osquery::QueryData {{function}}(QueryContext& context);

/// patch start //////////////////////////////////////////////////
{% if function_delete != "" %}\
osquery::QueryData {{function_delete}}(QueryContext& context,
                                       const PluginRequest& request);
{% endif %}\

{% if function_insert != "" %}\
osquery::QueryData {{function_insert}}(QueryContext& context,
                                       const PluginRequest& request);
{% endif %}\

{% if function_update != "" %}\
osquery::QueryData {{function_update}}(QueryContext& context,
                                       const PluginRequest& request);
{% endif %}\

/// patch end ///////////////////////////////////////////////////

{% endif %}\
{% else %}
class {{class_name}} {
 public:
  void {{function}}(RowYield& yield, QueryContext& context);
};
{% endif %}\
}

class {{table_name_cc}}TablePlugin : public TablePlugin {
 private:
  TableColumns columns() const override {
    return {
{% for column in schema %}\
      std::make_tuple("{{column.name}}", {{column.type.affinity}},\
{% if column.options|length > 0 %} {{column.options_set}}\
{% else %} ColumnOptions::DEFAULT\
{% endif %}\
),
{% endfor %}\
    };
  }
{% if aliases|length > 0 %}\

  std::vector<std::string> aliases() const override {
    return {
{% for alias in aliases %}\
      "{{alias}}",
{% endfor %}\
    };
  }
{% endif %}\

{% if has_column_aliases %}\

  ColumnAliasSet columnAliases() const override {
    return {
{% for column in schema %}\
{% if column.aliases|length > 0 %}\
      {"{{column.name}}", {% raw %}{{% endraw %}\
{% for alias in column.aliases %}"{{alias}}"\
{% if not loop.last %}, {% endif %}\
{% endfor %}}},
{% endif %}\
{% endfor %}\
    };
  }

  AliasColumnMap aliasedColumns() const override {
    return {
{% for column in schema %}\
{% if column.aliases|length > 0 %}\
{% for alias in column.aliases %}\
      { "{{alias}}", "{{column.name}}" },
{% endfor %}\
{% endif %}\
{% endfor %}\
    };
  }
{% endif %}\

  TableAttributes attributes() const override {
    return \
{% for attribute in attribute_set %}\
      TableAttributes::{{attribute}} |\
{% endfor %}\
      TableAttributes::NONE;
  }

{% if generator %}\
  bool usesGenerator() const override { return true; }

  void generator(RowYield& yield, QueryContext& context) override {
    tables::{{function}}(yield, context);
  }
{% else %}\
  TableRows generate(QueryContext& context) override {
{% if attributes.cacheable %}\
    if (isCached(kCacheStep, context)) {
      return getCache();
    }
{% endif %}\
{% if attributes.strongly_typed_rows %}\
    TableRows results = tables::{{function}}(context);
{% else %}\
    TableRows results = osquery::tableRowsFromQueryData(tables::{{function}}(context));
{% endif %}
{% if attributes.cacheable %}\
    setCache(kCacheStep, kCacheInterval, context, results);
{% endif %}
    return results;
  }

/// patch start /////////////////////////////////////////////////////
{% if function_delete != "" %}\
  QueryData delete_(QueryContext& context,
                   const PluginRequest& request) override {
    return tables::{{function_delete}}(context, request);
  }
{% endif %}\

{% if function_insert != "" %}\
  QueryData insert(QueryContext& context,
                   const PluginRequest& request) override {
    return tables::{{function_insert}}(context, request);
  }
{% endif %}\

{% if function_update != "" %}\
  QueryData update(QueryContext& context,
                   const PluginRequest& request) override {
    return tables::{{function_update}}(context, request);
  }
{% endif %}\

/// patch end ///////////////////////////////////////////////////////

{% endif %}\

};

{% if attributes.utility %}
REGISTER_INTERNAL({{table_name_cc}}TablePlugin, "table", "{{table_name}}");
{% else %}
REGISTER({{table_name_cc}}TablePlugin, "table", "{{table_name}}");
{% endif %}
/// END[GENTABLE]

}
